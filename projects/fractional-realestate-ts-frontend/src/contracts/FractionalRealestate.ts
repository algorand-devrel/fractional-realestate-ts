/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"FractionalRealEstate","structs":{"PropertyStruct":[{"name":"address","type":"string"},{"name":"totalShares","type":"uint64"},{"name":"availableShares","type":"uint64"},{"name":"pricePerShare","type":"uint64"},{"name":"propertyAssetId","type":"uint64"},{"name":"ownerAddress","type":"address"}]},"methods":[{"name":"createPropertyListing","args":[{"type":"string","name":"propertyAddress","desc":"The physical address of the property (string)"},{"type":"uint64","name":"shares","desc":"Total number of shares to be created (uint64)"},{"type":"uint64","name":"pricePerShare","desc":"Price per share in microAlgos (uint64)"}],"returns":{"type":"uint64","desc":"The asset ID of the created property token (uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"List a new property for fractional ownership.\n\nSteps:\n1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property.\n2. Constructs a PropertyStruct with all relevant details.\n3. Stores the struct in a BoxMap, using the asset ID as the key.","events":[],"recommendations":{}},{"name":"purchaseFromLister","args":[{"type":"uint64","name":"propertyId","desc":"The asset ID of the property to buy shares of"},{"type":"uint64","name":"shares","desc":"Number of shares to buy"},{"type":"pay","name":"payment","desc":"The payment transaction (must be grouped with the app call)"}],"returns":{"type":"bool","desc":"True if the purchase is successful"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Purchase shares of a listed property from the original lister.\n\nThis method:\n1. Validates the purchase (checks payment, share availability, etc.).\n2. Transfers the requested number of shares to the buyer using an inner asset transfer.\n3. Pays the property owner using an inner payment transaction.\n4. Updates the available shares in the BoxMap.","events":[],"recommendations":{}},{"name":"getPropertyInfo","args":[{"type":"uint64","name":"propertyId","desc":"The asset ID of the property"}],"returns":{"type":"(string,uint64,uint64,uint64,uint64,address)","struct":"PropertyStruct","desc":"The PropertyStruct containing the property's information"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get information about a listed property.","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"listedProperties":{"keyType":"uint64","valueType":"PropertyStruct","desc":"BoxMap for listed properties (key: property asset ID, value: PropertyStruct)","prefix":"cHJvcGVydGllcw=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[239],"errorMessage":"Account is not opted in to the property asset"},{"pc":[303,395,469],"errorMessage":"Box must have value"},{"pc":[373,412,417,422,427],"errorMessage":"Index access is out of bounds"},{"pc":[319],"errorMessage":"Invalid payment amount"},{"pc":[327],"errorMessage":"Invalid payment receiver"},{"pc":[335],"errorMessage":"Invalid payment sender"},{"pc":[346],"errorMessage":"Not enough shares"},{"pc":[65,85,126],"errorMessage":"OnCompletion is not NoOp"},{"pc":[300,467],"errorMessage":"Property not listed"},{"pc":[162],"errorMessage":"can only call when creating"},{"pc":[68,88,129],"errorMessage":"can only call when not creating"},{"pc":[106],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAEgJgMEFR98dQpwcm9wZXJ0aWVzAgBCMRtBAHqCAwTsGw+tBAo95RwE885RhDYaAI4DAD8AFgACIkMxGRREMRhENhoBF4gBeihMULAjQzEZFEQxGEQ2GgEXNhoCFzEWIwlJOBAjEkSIALGAAQAiTwJUKExQsCNDMRkURDEYRDYaAVcCADYaAhc2GgMXiAASFihMULAjQzEZQP+dMRgURCNDigMBsYv9FSJLAQ8iSwJPAk0kSwIPJEsDTwJNi/1OAlIyCkmyKrIpIrIji/6yIoAEUFJPULIlsiaBA7IQIrIBs7Q8MQBLAXAARQFETBZXBgKL/VCL/haL/xZLAxYxACpLBFBPBFBPA1BLAlBMUE8CUClPAlBJvEhMv4mKAwGL/RYpTFBJvUUBREm+RIv/OAhLAYESW4v+C0sBEkSL/zgHMgoSRIv/OAAxABJESwGBCluL/ksBDkRLAoEaWzEAsYv+shKyFLIRgQSyECKyAbNPAlciILGyB0yyCCOyECKyAbOL/glLAb5ETBZLASJZSwIVSwNOAlJLAlcCCEsDVxIISwRXGghPBVciICpPBFBPBVBPA1BPAlBMUExQSwG8SL8jiYoBAYv/FilMUEm9RQFEvkSJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type PropertyStruct = {
  address: string,
  totalShares: bigint,
  availableShares: bigint,
  pricePerShare: bigint,
  propertyAssetId: bigint,
  ownerAddress: string
}


/**
 * Converts the ABI tuple representation of a PropertyStruct to the struct representation
 */
export function PropertyStructFromTuple(abiTuple: [string, bigint, bigint, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PropertyStruct, APP_SPEC.structs) as PropertyStruct
}

/**
 * The argument types for the FractionalRealEstate contract
 */
export type FractionalRealEstateArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createPropertyListing(string,uint64,uint64)uint64': {
      /**
       * The physical address of the property (string)
       */
      propertyAddress: string
      /**
       * Total number of shares to be created (uint64)
       */
      shares: bigint | number
      /**
       * Price per share in microAlgos (uint64)
       */
      pricePerShare: bigint | number
    }
    'purchaseFromLister(uint64,uint64,pay)bool': {
      /**
       * The asset ID of the property to buy shares of
       */
      propertyId: bigint | number
      /**
       * Number of shares to buy
       */
      shares: bigint | number
      /**
       * The payment transaction (must be grouped with the app call)
       */
      payment: AppMethodCallTransactionArgument
    }
    'getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)': {
      /**
       * The asset ID of the property
       */
      propertyId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createPropertyListing(string,uint64,uint64)uint64': [propertyAddress: string, shares: bigint | number, pricePerShare: bigint | number]
    'purchaseFromLister(uint64,uint64,pay)bool': [propertyId: bigint | number, shares: bigint | number, payment: AppMethodCallTransactionArgument]
    'getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)': [propertyId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type FractionalRealEstateReturns = {
  'createPropertyListing(string,uint64,uint64)uint64': bigint
  'purchaseFromLister(uint64,uint64,pay)bool': boolean
  'getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)': PropertyStruct
}

/**
 * Defines the types of available calls and state of the FractionalRealEstate smart contract.
 */
export type FractionalRealEstateTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createPropertyListing(string,uint64,uint64)uint64' | 'createPropertyListing', {
      argsObj: FractionalRealEstateArgs['obj']['createPropertyListing(string,uint64,uint64)uint64']
      argsTuple: FractionalRealEstateArgs['tuple']['createPropertyListing(string,uint64,uint64)uint64']
      /**
       * The asset ID of the created property token (uint64)
       */
      returns: FractionalRealEstateReturns['createPropertyListing(string,uint64,uint64)uint64']
    }>
    & Record<'purchaseFromLister(uint64,uint64,pay)bool' | 'purchaseFromLister', {
      argsObj: FractionalRealEstateArgs['obj']['purchaseFromLister(uint64,uint64,pay)bool']
      argsTuple: FractionalRealEstateArgs['tuple']['purchaseFromLister(uint64,uint64,pay)bool']
      /**
       * True if the purchase is successful
       */
      returns: FractionalRealEstateReturns['purchaseFromLister(uint64,uint64,pay)bool']
    }>
    & Record<'getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)' | 'getPropertyInfo', {
      argsObj: FractionalRealEstateArgs['obj']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']
      argsTuple: FractionalRealEstateArgs['tuple']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']
      /**
       * The PropertyStruct containing the property's information
       */
      returns: FractionalRealEstateReturns['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        /**
         * BoxMap for listed properties (key: property asset ID, value: PropertyStruct)
         */
        listedProperties: Map<bigint | number, PropertyStruct>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FractionalRealEstateSignatures = keyof FractionalRealEstateTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FractionalRealEstateNonVoidMethodSignatures = keyof FractionalRealEstateTypes['methods'] extends infer T ? T extends keyof FractionalRealEstateTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FractionalRealEstate smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FractionalRealEstateSignatures> = FractionalRealEstateTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FractionalRealEstate smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FractionalRealEstateSignatures> = FractionalRealEstateTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FractionalRealEstateTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FractionalRealEstateCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FractionalRealEstateDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FractionalRealEstateCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FractionalRealEstate smart contract
 */
export abstract class FractionalRealEstateParamsFactory {
  /**
   * Constructs a no op call for the createPropertyListing(string,uint64,uint64)uint64 ABI method
   *
  * List a new property for fractional ownership.
  
  Steps:
  1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property.
  2. Constructs a PropertyStruct with all relevant details.
  3. Stores the struct in a BoxMap, using the asset ID as the key.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPropertyListing(params: CallParams<FractionalRealEstateArgs['obj']['createPropertyListing(string,uint64,uint64)uint64'] | FractionalRealEstateArgs['tuple']['createPropertyListing(string,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPropertyListing(string,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.propertyAddress, params.args.shares, params.args.pricePerShare],
    }
  }
  /**
   * Constructs a no op call for the purchaseFromLister(uint64,uint64,pay)bool ABI method
   *
  * Purchase shares of a listed property from the original lister.
  
  This method:
  1. Validates the purchase (checks payment, share availability, etc.).
  2. Transfers the requested number of shares to the buyer using an inner asset transfer.
  3. Pays the property owner using an inner payment transaction.
  4. Updates the available shares in the BoxMap.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchaseFromLister(params: CallParams<FractionalRealEstateArgs['obj']['purchaseFromLister(uint64,uint64,pay)bool'] | FractionalRealEstateArgs['tuple']['purchaseFromLister(uint64,uint64,pay)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchaseFromLister(uint64,uint64,pay)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.propertyId, params.args.shares, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address) ABI method
   *
   * Get information about a listed property.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPropertyInfo(params: CallParams<FractionalRealEstateArgs['obj']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'] | FractionalRealEstateArgs['tuple']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.propertyId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FractionalRealEstate smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FractionalRealEstateFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FractionalRealEstateFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FractionalRealEstateClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FractionalRealEstateClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FractionalRealEstate smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FractionalRealEstateDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FractionalRealEstateClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FractionalRealEstate smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FractionalRealEstate smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FractionalRealEstate smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FractionalRealEstateClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FractionalRealEstate smart contract
 */
export class FractionalRealEstateClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FractionalRealEstateClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FractionalRealEstate app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FractionalRealEstateClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FractionalRealEstateNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FractionalRealEstateClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FractionalRealEstateClient> {
    return new FractionalRealEstateClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FractionalRealEstateClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FractionalRealEstateClient> {
    return new FractionalRealEstateClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FractionalRealEstate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `createPropertyListing(string,uint64,uint64)uint64` ABI method.
     *
    * List a new property for fractional ownership.
    
    Steps:
    1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property.
    2. Constructs a PropertyStruct with all relevant details.
    3. Stores the struct in a BoxMap, using the asset ID as the key.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The asset ID of the created property token (uint64)
     */
    createPropertyListing: (params: CallParams<FractionalRealEstateArgs['obj']['createPropertyListing(string,uint64,uint64)uint64'] | FractionalRealEstateArgs['tuple']['createPropertyListing(string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FractionalRealEstateParamsFactory.createPropertyListing(params))
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `purchaseFromLister(uint64,uint64,pay)bool` ABI method.
     *
    * Purchase shares of a listed property from the original lister.
    
    This method:
    1. Validates the purchase (checks payment, share availability, etc.).
    2. Transfers the requested number of shares to the buyer using an inner asset transfer.
    3. Pays the property owner using an inner payment transaction.
    4. Updates the available shares in the BoxMap.

     *
     * @param params The params for the smart contract call
     * @returns The call params: True if the purchase is successful
     */
    purchaseFromLister: (params: CallParams<FractionalRealEstateArgs['obj']['purchaseFromLister(uint64,uint64,pay)bool'] | FractionalRealEstateArgs['tuple']['purchaseFromLister(uint64,uint64,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FractionalRealEstateParamsFactory.purchaseFromLister(params))
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about a listed property.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The PropertyStruct containing the property's information
     */
    getPropertyInfo: (params: CallParams<FractionalRealEstateArgs['obj']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'] | FractionalRealEstateArgs['tuple']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FractionalRealEstateParamsFactory.getPropertyInfo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FractionalRealEstate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `createPropertyListing(string,uint64,uint64)uint64` ABI method.
     *
    * List a new property for fractional ownership.
    
    Steps:
    1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property.
    2. Constructs a PropertyStruct with all relevant details.
    3. Stores the struct in a BoxMap, using the asset ID as the key.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The asset ID of the created property token (uint64)
     */
    createPropertyListing: (params: CallParams<FractionalRealEstateArgs['obj']['createPropertyListing(string,uint64,uint64)uint64'] | FractionalRealEstateArgs['tuple']['createPropertyListing(string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FractionalRealEstateParamsFactory.createPropertyListing(params))
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `purchaseFromLister(uint64,uint64,pay)bool` ABI method.
     *
    * Purchase shares of a listed property from the original lister.
    
    This method:
    1. Validates the purchase (checks payment, share availability, etc.).
    2. Transfers the requested number of shares to the buyer using an inner asset transfer.
    3. Pays the property owner using an inner payment transaction.
    4. Updates the available shares in the BoxMap.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if the purchase is successful
     */
    purchaseFromLister: (params: CallParams<FractionalRealEstateArgs['obj']['purchaseFromLister(uint64,uint64,pay)bool'] | FractionalRealEstateArgs['tuple']['purchaseFromLister(uint64,uint64,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FractionalRealEstateParamsFactory.purchaseFromLister(params))
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about a listed property.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The PropertyStruct containing the property's information
     */
    getPropertyInfo: (params: CallParams<FractionalRealEstateArgs['obj']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'] | FractionalRealEstateArgs['tuple']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FractionalRealEstateParamsFactory.getPropertyInfo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FractionalRealEstate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `createPropertyListing(string,uint64,uint64)uint64` ABI method.
     *
    * List a new property for fractional ownership.
    
    Steps:
    1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property.
    2. Constructs a PropertyStruct with all relevant details.
    3. Stores the struct in a BoxMap, using the asset ID as the key.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The asset ID of the created property token (uint64)
     */
    createPropertyListing: async (params: CallParams<FractionalRealEstateArgs['obj']['createPropertyListing(string,uint64,uint64)uint64'] | FractionalRealEstateArgs['tuple']['createPropertyListing(string,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FractionalRealEstateParamsFactory.createPropertyListing(params))
      return {...result, return: result.return as unknown as (undefined | FractionalRealEstateReturns['createPropertyListing(string,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `purchaseFromLister(uint64,uint64,pay)bool` ABI method.
     *
    * Purchase shares of a listed property from the original lister.
    
    This method:
    1. Validates the purchase (checks payment, share availability, etc.).
    2. Transfers the requested number of shares to the buyer using an inner asset transfer.
    3. Pays the property owner using an inner payment transaction.
    4. Updates the available shares in the BoxMap.

     *
     * @param params The params for the smart contract call
     * @returns The call result: True if the purchase is successful
     */
    purchaseFromLister: async (params: CallParams<FractionalRealEstateArgs['obj']['purchaseFromLister(uint64,uint64,pay)bool'] | FractionalRealEstateArgs['tuple']['purchaseFromLister(uint64,uint64,pay)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FractionalRealEstateParamsFactory.purchaseFromLister(params))
      return {...result, return: result.return as unknown as (undefined | FractionalRealEstateReturns['purchaseFromLister(uint64,uint64,pay)bool'])}
    },

    /**
     * Makes a call to the FractionalRealEstate smart contract using the `getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get information about a listed property.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The PropertyStruct containing the property's information
     */
    getPropertyInfo: async (params: CallParams<FractionalRealEstateArgs['obj']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'] | FractionalRealEstateArgs['tuple']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FractionalRealEstateParamsFactory.getPropertyInfo(params))
      return {...result, return: result.return as unknown as (undefined | FractionalRealEstateReturns['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FractionalRealEstateClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the FractionalRealEstate smart contract using the `getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get information about a listed property.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The PropertyStruct containing the property's information
   */
  async getPropertyInfo(params: CallParams<FractionalRealEstateArgs['obj']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'] | FractionalRealEstateArgs['tuple']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']>) {
    const result = await this.appClient.send.call(FractionalRealEstateParamsFactory.getPropertyInfo(params))
    return result.return as unknown as FractionalRealEstateReturns['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']
  }

  /**
   * Methods to access state for the current FractionalRealEstate app
   */
  state = {
    /**
     * Methods to access box state for the current FractionalRealEstate app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the listedProperties map in box state
       */
      listedProperties: {
        /**
         * Get all current values of the listedProperties map in box state
         */
        getMap: async (): Promise<Map<bigint, PropertyStruct>> => { return (await this.appClient.state.box.getMap("listedProperties")) as Map<bigint, PropertyStruct> },
        /**
         * Get a current value of the listedProperties map by key from box state
         */
        value: async (key: bigint | number): Promise<PropertyStruct | undefined> => { return await this.appClient.state.box.getMapValue("listedProperties", key) as PropertyStruct | undefined },
      },
    },
  }

  public newGroup(): FractionalRealEstateComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPropertyListing(string,uint64,uint64)uint64 method call against the FractionalRealEstate contract
       */
      createPropertyListing(params: CallParams<FractionalRealEstateArgs['obj']['createPropertyListing(string,uint64,uint64)uint64'] | FractionalRealEstateArgs['tuple']['createPropertyListing(string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPropertyListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPropertyListing(string,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a purchaseFromLister(uint64,uint64,pay)bool method call against the FractionalRealEstate contract
       */
      purchaseFromLister(params: CallParams<FractionalRealEstateArgs['obj']['purchaseFromLister(uint64,uint64,pay)bool'] | FractionalRealEstateArgs['tuple']['purchaseFromLister(uint64,uint64,pay)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchaseFromLister(params)))
        resultMappers.push((v) => client.decodeReturnValue('purchaseFromLister(uint64,uint64,pay)bool', v))
        return this
      },
      /**
       * Add a getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address) method call against the FractionalRealEstate contract
       */
      getPropertyInfo(params: CallParams<FractionalRealEstateArgs['obj']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'] | FractionalRealEstateArgs['tuple']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPropertyInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)', v))
        return this
      },
      /**
       * Add a clear state call to the FractionalRealEstate contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FractionalRealEstateComposer
  }
}
export type FractionalRealEstateComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPropertyListing(string,uint64,uint64)uint64 ABI method.
   *
  * List a new property for fractional ownership.
  
  Steps:
  1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property.
  2. Constructs a PropertyStruct with all relevant details.
  3. Stores the struct in a BoxMap, using the asset ID as the key.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPropertyListing(params?: CallParams<FractionalRealEstateArgs['obj']['createPropertyListing(string,uint64,uint64)uint64'] | FractionalRealEstateArgs['tuple']['createPropertyListing(string,uint64,uint64)uint64']>): FractionalRealEstateComposer<[...TReturns, FractionalRealEstateReturns['createPropertyListing(string,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the purchaseFromLister(uint64,uint64,pay)bool ABI method.
   *
  * Purchase shares of a listed property from the original lister.
  
  This method:
  1. Validates the purchase (checks payment, share availability, etc.).
  2. Transfers the requested number of shares to the buyer using an inner asset transfer.
  3. Pays the property owner using an inner payment transaction.
  4. Updates the available shares in the BoxMap.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseFromLister(params?: CallParams<FractionalRealEstateArgs['obj']['purchaseFromLister(uint64,uint64,pay)bool'] | FractionalRealEstateArgs['tuple']['purchaseFromLister(uint64,uint64,pay)bool']>): FractionalRealEstateComposer<[...TReturns, FractionalRealEstateReturns['purchaseFromLister(uint64,uint64,pay)bool'] | undefined]>

  /**
   * Calls the getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * Get information about a listed property.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPropertyInfo(params?: CallParams<FractionalRealEstateArgs['obj']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'] | FractionalRealEstateArgs['tuple']['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)']>): FractionalRealEstateComposer<[...TReturns, FractionalRealEstateReturns['getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FractionalRealEstate smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FractionalRealEstateComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FractionalRealEstateComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FractionalRealEstateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FractionalRealEstateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FractionalRealEstateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FractionalRealEstateComposerResults<TReturns>>
}
export type FractionalRealEstateComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

