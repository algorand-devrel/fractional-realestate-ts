{
    "name": "FractionalRealEstate",
    "structs": {
        "PropertyStruct": [
            {
                "name": "address",
                "type": "string"
            },
            {
                "name": "totalShares",
                "type": "uint64"
            },
            {
                "name": "availableShares",
                "type": "uint64"
            },
            {
                "name": "pricePerShare",
                "type": "uint64"
            },
            {
                "name": "propertyAssetId",
                "type": "uint64"
            },
            {
                "name": "ownerAddress",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "createPropertyListing",
            "args": [
                {
                    "type": "string",
                    "name": "propertyAddress",
                    "desc": "The physical address of the property (string)"
                },
                {
                    "type": "uint64",
                    "name": "shares",
                    "desc": "Total number of shares to be created (uint64)"
                },
                {
                    "type": "uint64",
                    "name": "pricePerShare",
                    "desc": "Price per share in microAlgos (uint64)"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The asset ID of the created property token (uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "List a new property for fractional ownership.\n\nSteps:\n1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property.\n2. Constructs a PropertyStruct with all relevant details.\n3. Stores the struct in a BoxMap, using the asset ID as the key.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchaseFromLister",
            "args": [
                {
                    "type": "uint64",
                    "name": "propertyId",
                    "desc": "The asset ID of the property to buy shares of"
                },
                {
                    "type": "uint64",
                    "name": "shares",
                    "desc": "Number of shares to buy"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction (must be grouped with the app call)"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if the purchase is successful"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Purchase shares of a listed property from the original lister.\n\nThis method:\n1. Validates the purchase (checks payment, share availability, etc.).\n2. Transfers the requested number of shares to the buyer using an inner asset transfer.\n3. Pays the property owner using an inner payment transaction.\n4. Updates the available shares in the BoxMap.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPropertyInfo",
            "args": [
                {
                    "type": "uint64",
                    "name": "propertyId",
                    "desc": "The asset ID of the property"
                }
            ],
            "returns": {
                "type": "(string,uint64,uint64,uint64,uint64,address)",
                "struct": "PropertyStruct",
                "desc": "The PropertyStruct containing the property's information"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get information about a listed property.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listedProperties": {
                    "keyType": "uint64",
                    "valueType": "PropertyStruct",
                    "desc": "BoxMap for listed properties (key: property asset ID, value: PropertyStruct)",
                    "prefix": "cHJvcGVydGllcw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        378
                    ],
                    "errorMessage": "Invalid payment amount"
                },
                {
                    "pc": [
                        386
                    ],
                    "errorMessage": "Invalid payment receiver"
                },
                {
                    "pc": [
                        394
                    ],
                    "errorMessage": "Invalid payment sender"
                },
                {
                    "pc": [
                        407
                    ],
                    "errorMessage": "Not enough shares"
                },
                {
                    "pc": [
                        65,
                        85,
                        126
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        358,
                        602
                    ],
                    "errorMessage": "Property not listed"
                },
                {
                    "pc": [
                        162
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        68,
                        88,
                        129
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        106
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDggMzIKICAgIGJ5dGVjYmxvY2sgMHgwMDQyIDB4MTUxZjdjNzUgInByb3BlcnRpZXMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJhY3Rpb25hbFJlYWxFc3RhdGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOAogICAgcHVzaGJ5dGVzcyAweGVjMWIwZmFkIDB4MGEzZGU1MWMgMHhmM2NlNTE4NCAvLyBtZXRob2QgImNyZWF0ZVByb3BlcnR5TGlzdGluZyhzdHJpbmcsdWludDY0LHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgInB1cmNoYXNlRnJvbUxpc3Rlcih1aW50NjQsdWludDY0LHBheSlib29sIiwgbWV0aG9kICJnZXRQcm9wZXJ0eUluZm8odWludDY0KShzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LGFkZHJlc3MpIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVQcm9wZXJ0eUxpc3Rpbmdfcm91dGVAMyBtYWluX3B1cmNoYXNlRnJvbUxpc3Rlcl9yb3V0ZUA0IG1haW5fZ2V0UHJvcGVydHlJbmZvX3JvdXRlQDUKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMjoKICAgIGVycgoKbWFpbl9nZXRQcm9wZXJ0eUluZm9fcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjIxNwogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjUzCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBGcmFjdGlvbmFsUmVhbEVzdGF0ZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjIxNwogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGdldFByb3BlcnR5SW5mbwogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9wdXJjaGFzZUZyb21MaXN0ZXJfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjEzMAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjUzCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBGcmFjdGlvbmFsUmVhbEVzdGF0ZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTMwCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgcHVyY2hhc2VGcm9tTGlzdGVyCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZVByb3BlcnR5TGlzdGluZ19yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6NzIKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJhY3Rpb25hbFJlYWxFc3RhdGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6NzIKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBjcmVhdGVQcm9wZXJ0eUxpc3RpbmcKICAgIGl0b2IKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJhY3Rpb25hbFJlYWxFc3RhdGUgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDEyCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjpGcmFjdGlvbmFsUmVhbEVzdGF0ZS5jcmVhdGVQcm9wZXJ0eUxpc3RpbmcocHJvcGVydHlBZGRyZXNzOiBieXRlcywgc2hhcmVzOiB1aW50NjQsIHByaWNlUGVyU2hhcmU6IHVpbnQ2NCkgLT4gdWludDY0OgpjcmVhdGVQcm9wZXJ0eUxpc3Rpbmc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czo3Mi03MwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgY3JlYXRlUHJvcGVydHlMaXN0aW5nKHByb3BlcnR5QWRkcmVzczogc3RyaW5nLCBzaGFyZXM6IHVpbnQ2NCwgcHJpY2VQZXJTaGFyZTogdWludDY0KTogdWludDY0IHsKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTAyLTExMgogICAgLy8gY29uc3QgdHhuUmVzdWx0ID0gaXR4bgogICAgLy8gICAuYXNzZXRDb25maWcoewogICAgLy8gICAgIGFzc2V0TmFtZTogQnl0ZXMocHJvcGVydHlBZGRyZXNzKS5zbGljZSgwLCAzMikudG9TdHJpbmcoKSwKICAgIC8vICAgICB1bml0TmFtZTogJ1BST1AnLAogICAgLy8gICAgIHRvdGFsOiBzaGFyZXMsCiAgICAvLyAgICAgZGVjaW1hbHM6IDAsCiAgICAvLyAgICAgbWFuYWdlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgICAgcmVzZXJ2ZTogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjEwNAogICAgLy8gYXNzZXROYW1lOiBCeXRlcyhwcm9wZXJ0eUFkZHJlc3MpLnNsaWNlKDAsIDMyKS50b1N0cmluZygpLAogICAgZnJhbWVfZGlnIC0zCiAgICBsZW4KICAgIGludGNfMCAvLyAwCiAgICBkaWcgMQogICAgPj0KICAgIGludGNfMCAvLyAwCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGludGNfMyAvLyAzMgogICAgZGlnIDIKICAgID49CiAgICBpbnRjXzMgLy8gMzIKICAgIGRpZyAzCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZnJhbWVfZGlnIC0zCiAgICBjb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxMDgKICAgIC8vIG1hbmFnZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjEwOQogICAgLy8gcmVzZXJ2ZTogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICBkdXAKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTA3CiAgICAvLyBkZWNpbWFsczogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxMDUKICAgIC8vIHVuaXROYW1lOiAnUFJPUCcsCiAgICBwdXNoYnl0ZXMgIlBST1AiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxMDItMTExCiAgICAvLyBjb25zdCB0eG5SZXN1bHQgPSBpdHhuCiAgICAvLyAgIC5hc3NldENvbmZpZyh7CiAgICAvLyAgICAgYXNzZXROYW1lOiBCeXRlcyhwcm9wZXJ0eUFkZHJlc3MpLnNsaWNlKDAsIDMyKS50b1N0cmluZygpLAogICAgLy8gICAgIHVuaXROYW1lOiAnUFJPUCcsCiAgICAvLyAgICAgdG90YWw6IHNoYXJlcywKICAgIC8vICAgICBkZWNpbWFsczogMCwKICAgIC8vICAgICBtYW5hZ2VyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgICByZXNlcnZlOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDMgLy8gMwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTEwCiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjEwMi0xMTIKICAgIC8vIGNvbnN0IHR4blJlc3VsdCA9IGl0eG4KICAgIC8vICAgLmFzc2V0Q29uZmlnKHsKICAgIC8vICAgICBhc3NldE5hbWU6IEJ5dGVzKHByb3BlcnR5QWRkcmVzcykuc2xpY2UoMCwgMzIpLnRvU3RyaW5nKCksCiAgICAvLyAgICAgdW5pdE5hbWU6ICdQUk9QJywKICAgIC8vICAgICB0b3RhbDogc2hhcmVzLAogICAgLy8gICAgIGRlY2ltYWxzOiAwLAogICAgLy8gICAgIG1hbmFnZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIHJlc2VydmU6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6ODQKICAgIC8vIG93bmVyQWRkcmVzczogVHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjc4LTg1CiAgICAvLyBjb25zdCBwcm9wZXJ0eVN0cnVjdCA9IHsKICAgIC8vICAgYWRkcmVzczogcHJvcGVydHlBZGRyZXNzLAogICAgLy8gICB0b3RhbFNoYXJlczogc2hhcmVzLAogICAgLy8gICBhdmFpbGFibGVTaGFyZXM6IHNoYXJlcywKICAgIC8vICAgcHJpY2VQZXJTaGFyZTogcHJpY2VQZXJTaGFyZSwKICAgIC8vICAgcHJvcGVydHlBc3NldElkOmFzc2V0SWQsCiAgICAvLyAgIG93bmVyQWRkcmVzczogVHhuLnNlbmRlciwKICAgIC8vIH0KICAgIHVuY292ZXIgMgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgwMDQyCiAgICBkaWcgMQogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgY29uY2F0CiAgICBkaWcgMwogICAgaXRvYgogICAgc3dhcAogICAgZGlnIDEKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czo4OAogICAgLy8gdGhpcy5saXN0ZWRQcm9wZXJ0aWVzKGFzc2V0SWQpLnZhbHVlID0gY2xvbmUocHJvcGVydHlTdHJ1Y3QpCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDEKICAgIGxlbgogICAgZGlnIDIKICAgIGNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgMQogICAgZXh0cmFjdCAyIDgKICAgIGRpZyAyCiAgICBleHRyYWN0IDEwIDgKICAgIGRpZyAzCiAgICBleHRyYWN0IDE4IDgKICAgIGRpZyA0CiAgICBleHRyYWN0IDI2IDgKICAgIHVuY292ZXIgNQogICAgZXh0cmFjdCAzNCAzMgogICAgZGlnIDUKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgNgogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MDA0MgogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIHVuY292ZXIgNQogICAgY29uY2F0CiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgbGlzdGVkUHJvcGVydGllcyA9IEJveE1hcDx1aW50NjQsIFByb3BlcnR5U3RydWN0Pih7IGtleVByZWZpeDogJ3Byb3BlcnRpZXMnIH0pCiAgICBieXRlY18yIC8vICJwcm9wZXJ0aWVzIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjg4CiAgICAvLyB0aGlzLmxpc3RlZFByb3BlcnRpZXMoYXNzZXRJZCkudmFsdWUgPSBjbG9uZShwcm9wZXJ0eVN0cnVjdCkKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czo5MAogICAgLy8gcmV0dXJuIGFzc2V0SWQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjpGcmFjdGlvbmFsUmVhbEVzdGF0ZS5wdXJjaGFzZUZyb21MaXN0ZXIocHJvcGVydHlJZDogdWludDY0LCBzaGFyZXM6IHVpbnQ2NCwgcGF5bWVudDogdWludDY0KSAtPiB1aW50NjQ6CnB1cmNoYXNlRnJvbUxpc3RlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjEzMC0xMzEKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gcHVibGljIHB1cmNoYXNlRnJvbUxpc3Rlcihwcm9wZXJ0eUlkOiB1aW50NjQsIHNoYXJlczogdWludDY0LCBwYXltZW50OiBndHhuLlBheW1lbnRUeG4pOiBib29sZWFuIHsKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTMzCiAgICAvLyBhc3NlcnQodGhpcy5saXN0ZWRQcm9wZXJ0aWVzKHByb3BlcnR5SWQpLmV4aXN0cywgJ1Byb3BlcnR5IG5vdCBsaXN0ZWQnKQogICAgZnJhbWVfZGlnIC0zCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czo1NwogICAgLy8gcHVibGljIGxpc3RlZFByb3BlcnRpZXMgPSBCb3hNYXA8dWludDY0LCBQcm9wZXJ0eVN0cnVjdD4oeyBrZXlQcmVmaXg6ICdwcm9wZXJ0aWVzJyB9KQogICAgYnl0ZWNfMiAvLyAicHJvcGVydGllcyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTMzCiAgICAvLyBhc3NlcnQodGhpcy5saXN0ZWRQcm9wZXJ0aWVzKHByb3BlcnR5SWQpLmV4aXN0cywgJ1Byb3BlcnR5IG5vdCBsaXN0ZWQnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBQcm9wZXJ0eSBub3QgbGlzdGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxMzcKICAgIC8vIGFzc2VydChwYXltZW50LmFtb3VudCA9PT0gc2hhcmVzICogcHJvcGVydHkucHJpY2VQZXJTaGFyZSwgJ0ludmFsaWQgcGF5bWVudCBhbW91bnQnKQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjEzNAogICAgLy8gY29uc3QgcHJvcGVydHkgPSBjbG9uZSh0aGlzLmxpc3RlZFByb3BlcnRpZXMocHJvcGVydHlJZCkudmFsdWUpCiAgICBkaWcgMQogICAgcHVzaGludCAxOCAvLyAxOAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxMzcKICAgIC8vIGFzc2VydChwYXltZW50LmFtb3VudCA9PT0gc2hhcmVzICogcHJvcGVydHkucHJpY2VQZXJTaGFyZSwgJ0ludmFsaWQgcGF5bWVudCBhbW91bnQnKQogICAgYnRvaQogICAgZnJhbWVfZGlnIC0yCiAgICBkaWcgMQogICAgKgogICAgZGlnIDIKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBwYXltZW50IGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTM5CiAgICAvLyBhc3NlcnQocGF5bWVudC5yZWNlaXZlciA9PT0gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsICdJbnZhbGlkIHBheW1lbnQgcmVjZWl2ZXInKQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBwYXltZW50IHJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxNDEKICAgIC8vIGFzc2VydChwYXltZW50LnNlbmRlciA9PT0gVHhuLnNlbmRlciwgJ0ludmFsaWQgcGF5bWVudCBzZW5kZXInKQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gSW52YWxpZCBwYXltZW50IHNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTM0CiAgICAvLyBjb25zdCBwcm9wZXJ0eSA9IGNsb25lKHRoaXMubGlzdGVkUHJvcGVydGllcyhwcm9wZXJ0eUlkKS52YWx1ZSkKICAgIGRpZyAyCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBpbnRjXzIgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjE0MwogICAgLy8gYXNzZXJ0KHNoYXJlcyA8PSBwcm9wZXJ0eS5hdmFpbGFibGVTaGFyZXMsICdOb3QgZW5vdWdoIHNoYXJlcycpCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTIKICAgIGRpZyAxCiAgICA8PQogICAgYXNzZXJ0IC8vIE5vdCBlbm91Z2ggc2hhcmVzCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxMzQKICAgIC8vIGNvbnN0IHByb3BlcnR5ID0gY2xvbmUodGhpcy5saXN0ZWRQcm9wZXJ0aWVzKHByb3BlcnR5SWQpLnZhbHVlKQogICAgZGlnIDMKICAgIHB1c2hpbnQgMjYgLy8gMjYKICAgIGludGNfMiAvLyA4CiAgICBib3hfZXh0cmFjdAogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTQ2CiAgICAvLyBjb25zdCBhc3NldCA9IEFzc2V0KHByb3BlcnR5LnByb3BlcnR5QXNzZXRJZCkKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjE0NwogICAgLy8gdGhpcy50cmFuc2ZlclNoYXJlc1RvQnV5ZXIoVHhuLnNlbmRlciwgYXNzZXQsIHNoYXJlcykKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjE2Ni0xNzMKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXQsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIsIC8vIEJ1eWVyCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IHNoYXJlcywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGR1cAogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjE2Ni0xNzIKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXQsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIsIC8vIEJ1eWVyCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IHNoYXJlcywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDQgLy8gNAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTcxCiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjE2Ni0xNzMKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXQsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIsIC8vIEJ1eWVyCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IHNoYXJlcywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjEzNAogICAgLy8gY29uc3QgcHJvcGVydHkgPSBjbG9uZSh0aGlzLmxpc3RlZFByb3BlcnRpZXMocHJvcGVydHlJZCkudmFsdWUpCiAgICBkaWcgNAogICAgcHVzaGludCAzNCAvLyAzNAogICAgaW50Y18zIC8vIDMyCiAgICBib3hfZXh0cmFjdAogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTg0LTE5MAogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50LAogICAgLy8gICAgIHJlY2VpdmVyOiBvd25lckFkZHJlc3MuYnl0ZXMsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIGR1cAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgdW5jb3ZlciA0CiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MTg0LTE4OQogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50LAogICAgLy8gICAgIHJlY2VpdmVyOiBvd25lckFkZHJlc3MuYnl0ZXMsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjE4OAogICAgLy8gZmVlOiAwLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxODQtMTkwCiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQsCiAgICAvLyAgICAgcmVjZWl2ZXI6IG93bmVyQWRkcmVzcy5ieXRlcywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjE1MwogICAgLy8gdGhpcy51cGRhdGVBdmFpbGFibGVTaGFyZXMocHJvcGVydHlJZCwgcHJvcGVydHkuYXZhaWxhYmxlU2hhcmVzIC0gc2hhcmVzKQogICAgdW5jb3ZlciAyCiAgICBmcmFtZV9kaWcgLTIKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjIwMgogICAgLy8gY29uc3QgcHJvcGVydHlTdHJ1Y3QgPSBjbG9uZSh0aGlzLmxpc3RlZFByb3BlcnRpZXMocHJvcGVydHlJZCkudmFsdWUpCiAgICBkaWcgNAogICAgYm94X2dldAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoyMDQKICAgIC8vIC4uLnByb3BlcnR5U3RydWN0LAogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAxCiAgICBsZW4KICAgIHN1YnN0cmluZzMKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoyMDIKICAgIC8vIGNvbnN0IHByb3BlcnR5U3RydWN0ID0gY2xvbmUodGhpcy5saXN0ZWRQcm9wZXJ0aWVzKHByb3BlcnR5SWQpLnZhbHVlKQogICAgZGlnIDUKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBpbnRjXzIgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjIwNAogICAgLy8gLi4ucHJvcGVydHlTdHJ1Y3QsCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoyMDMtMjA2CiAgICAvLyBjb25zdCB1cGRhdGVkU3RydWN0ID0gewogICAgLy8gICAuLi5wcm9wZXJ0eVN0cnVjdCwKICAgIC8vICAgYXZhaWxhYmxlU2hhcmVzOiBuZXdBdmFpbGFibGVTaGFyZXMsCiAgICAvLyB9CiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGRpZyAyCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgc3dhcAogICAgYnl0ZWNfMCAvLyAweDAwNDIKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHVuY292ZXIgNAogICAgaXRvYgogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGl0b2IKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6MjA4CiAgICAvLyB0aGlzLmxpc3RlZFByb3BlcnRpZXMocHJvcGVydHlJZCkudmFsdWUgPSBjbG9uZSh1cGRhdGVkU3RydWN0KQogICAgZHVwCiAgICBpbnRjXzIgLy8gOAogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAxCiAgICBsZW4KICAgIGRpZyAyCiAgICBjb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgZGlnIDEKICAgIGV4dHJhY3QgMTAgOAogICAgZGlnIDIKICAgIGV4dHJhY3QgMCA4CiAgICBkaWcgMwogICAgZXh0cmFjdCAxOCA4CiAgICBkaWcgNAogICAgZXh0cmFjdCAyNiA4CiAgICB1bmNvdmVyIDUKICAgIGV4dHJhY3QgMzQgMzIKICAgIGRpZyA1CiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDAwNDIKICAgIHVuY292ZXIgNgogICAgY29uY2F0CiAgICB1bmNvdmVyIDUKICAgIGNvbmNhdAogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMQogICAgYm94X2RlbAogICAgcG9wCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoxNTUKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL0ZyYWN0aW9uYWxSZWFsRXN0YXRlL2NvbnRyYWN0LmFsZ28udHM6OkZyYWN0aW9uYWxSZWFsRXN0YXRlLmdldFByb3BlcnR5SW5mbyhwcm9wZXJ0eUlkOiB1aW50NjQpIC0+IGJ5dGVzOgpnZXRQcm9wZXJ0eUluZm86CiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoyMTctMjE4CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIHB1YmxpYyBnZXRQcm9wZXJ0eUluZm8ocHJvcGVydHlJZDogdWludDY0KTogUHJvcGVydHlTdHJ1Y3QgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoyMTkKICAgIC8vIGFzc2VydCh0aGlzLmxpc3RlZFByb3BlcnRpZXMocHJvcGVydHlJZCkuZXhpc3RzLCAnUHJvcGVydHkgbm90IGxpc3RlZCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgbGlzdGVkUHJvcGVydGllcyA9IEJveE1hcDx1aW50NjQsIFByb3BlcnR5U3RydWN0Pih7IGtleVByZWZpeDogJ3Byb3BlcnRpZXMnIH0pCiAgICBieXRlY18yIC8vICJwcm9wZXJ0aWVzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvRnJhY3Rpb25hbFJlYWxFc3RhdGUvY29udHJhY3QuYWxnby50czoyMTkKICAgIC8vIGFzc2VydCh0aGlzLmxpc3RlZFByb3BlcnRpZXMocHJvcGVydHlJZCkuZXhpc3RzLCAnUHJvcGVydHkgbm90IGxpc3RlZCcpCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIFByb3BlcnR5IG5vdCBsaXN0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9GcmFjdGlvbmFsUmVhbEVzdGF0ZS9jb250cmFjdC5hbGdvLnRzOjIyMQogICAgLy8gcmV0dXJuIHRoaXMubGlzdGVkUHJvcGVydGllcyhwcm9wZXJ0eUlkKS52YWx1ZQogICAgYm94X2dldAogICAgcG9wCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEIICYDAgBCBBUffHUKcHJvcGVydGllczEbQQB5ggME7BsPrQQKPeUcBPPOUYQ2GgCOAwA+ABUAAQAxGRREMRhENhoBF4gCASlMULAjQzEZFEQxGEQ2GgEXNhoCFzEWIwlJOBAjEkSIAOuAAQAiTwJUKUxQsCNDMRkURDEYRDYaAVcCADYaAhc2GgMXiAASFilMULAjQzEZQP+eMRgURCNDigMBsYv9FSJLAQ8iSwJPAk0lSwIPJUsDTwJNi/1OAlIyCkmyKrIpIrIji/6yIoAEUFJPULIlsiaBA7IQIrIBs7Q8MQBPAhZXBgKL/VCL/hYoSwFQTFCL/xZQSwMWTEsBUE8DUE8CUEkiWUsBFUsCTgJSVwIASwFXAghLAlcKCEsDVxIISwRXGghPBVciIEsFFRZXBgJPBlAoTwZQTwVQTwRQTwNQTwJQTFAqTwJQSbxITL+JigMBi/0WKkxQSb1FAUSL/zgISwGBEiS6F4v+SwELSwISRIv/OAcyChJEi/84ADEAEkRLAoEKJLoXi/5LAQ5ESwOBGiS6FzEAsYv+shKyFEmyEYEEshAisgGzSwSBIiW6sUmyB08EsggjshAisgGzTwKL/glLBL5ISSJZSwEVUlcCAEsFgQIkuhdPAhZLAhUWVwYCTwNQTChQTwIWUE8EFlBPAxZQTwJQTFBJJFlLARVLAk4CUlcCAEsBVwoISwJXAAhLA1cSCEsEVxoITwVXIiBLBRUWVwYCTwZQKE8GUE8FUE8EUE8DUE8CUExQSwG8SL8jiYoBAYv/FipMUEm9RQFEvkiJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}